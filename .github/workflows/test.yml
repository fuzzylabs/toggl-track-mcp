name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv sync --extra dev
    
    - name: Lint with ruff
      run: |
        uv run ruff check toggl_track_mcp/
    
    - name: Check formatting with black
      run: |
        uv run black --check toggl_track_mcp/
    
    - name: Check import sorting with isort
      run: |
        uv run isort --check-only toggl_track_mcp/
    
    - name: Type check with mypy
      run: |
        uv run mypy toggl_track_mcp/
    
    - name: Run tests with coverage
      run: |
        uv run pytest tests/ -v --cov=toggl_track_mcp --cov-report=xml --cov-report=term-missing --cov-fail-under=90
    
    - name: Check for missing test files
      run: |
        uv run python - << 'EOF'
        import os
        import sys
        from pathlib import Path
        
        # Find all Python files in the main package
        package_dir = Path("toggl_track_mcp")
        test_dir = Path("tests")
        
        missing_tests = []
        for py_file in package_dir.rglob("*.py"):
            if py_file.name == "__init__.py":
                continue
                
            # Expected test file path
            rel_path = py_file.relative_to(package_dir)
            test_file = test_dir / f"test_{rel_path}"
            
            if not test_file.exists():
                missing_tests.append(str(rel_path))
        
        if missing_tests:
            print("❌ Missing test files for:")
            for missing in missing_tests:
                print(f"  - {missing}")
            print(f"\n💡 Create test files in tests/ directory following the pattern test_<module_name>.py")
            sys.exit(1)
        else:
            print("✅ All modules have corresponding test files")
        EOF
    
    - name: Validate server can start
      run: |
        uv run python -c "
        import os
        os.environ['TOGGL_API_TOKEN'] = 'test_token'
        from toggl_track_mcp.server import app
        print('✅ Server imports successfully')
        "
    
    - name: Check MCP tools have tests
      run: |
        uv run python - << 'EOF'
        import ast
        import sys
        from pathlib import Path
        
        # Find all @mcp.tool() decorated functions
        server_file = Path("toggl_track_mcp/server.py")
        test_files = list(Path("tests").glob("test_*.py"))
        
        with open(server_file) as f:
            tree = ast.parse(f.read())
        
        mcp_tools = []
        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef):
                for decorator in node.decorator_list:
                    if (isinstance(decorator, ast.Call) and 
                        isinstance(decorator.func, ast.Attribute) and
                        decorator.func.attr == "tool"):
                        mcp_tools.append(node.name)
        
        # Check if test files contain tests for these tools
        test_content = ""
        for test_file in test_files:
            with open(test_file) as f:
                test_content += f.read()
        
        missing_tool_tests = []
        for tool in mcp_tools:
            if f"test_{tool}" not in test_content:
                missing_tool_tests.append(tool)
        
        if missing_tool_tests:
            print("❌ Missing tests for MCP tools:")
            for tool in missing_tool_tests:
                print(f"  - {tool}")
            print(f"\n💡 Each @mcp.tool() function needs test_{tool}() functions")
            sys.exit(1)
        else:
            print(f"✅ All {len(mcp_tools)} MCP tools have tests")
        EOF
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella